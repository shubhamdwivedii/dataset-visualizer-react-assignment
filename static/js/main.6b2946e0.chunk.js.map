{"version":3,"sources":["components/TempGauge/index.js","components/TempChart/index.js","components/AreaInfo/index.js","components/AreaAll/index.js","components/AreaData/index.js","components/BarChart/index.js","components/Table/index.js","components/LiveData/index.js","services/data.js","services/reducer.js","components/Dashboard/index.js","App.js","reportWebVitals.js","index.js"],"names":["TempGauge","props","value","title","nrOfLevels","percent","formatTextValue","val","textColor","needleColor","id","TempChart","height","data","scale","time","range","autoFit","name","label","formatter","useHtml","g2-tooltip","boxShadow","color","backgroundColor","crosshairs","type","style","position","size","shape","stroke","lineWidth","Content","Layout","AreaInfo","areas","params","match","useState","area","setArea","areaId","useEffect","areaData","find","split","join","className","chartData","wrlss_data","temp_data","sort","a","b","Date","margin","temp_avg","wrlss_avg","AreaAll","history","useHistory","map","onClick","push","showAreaInfo","SubMenu","Menu","Sider","AreaData","areaList","breakpoint","collapsedWidth","mode","defaultSelectedKeys","defaultOpenKeys","width","borderRight","icon","HomeOutlined","nme","Item","areaName","selectArea","padding","path","render","exact","BarChart","temperature","interactions","shared","columns","dataIndex","key","moment","format","CustomTable","dataSource","LiveData","showTemperature","setShowTemperature","wireless","onBreakpoint","broken","console","log","onCollapse","collapsed","Table","this","sampleSize","sampleNo","startAt","endAt","slice","get","dataset","elem","device_display_name","initialState","checkTime","timestamp","now","diff","getTime","Math","abs","round","reducer","state","action","dataClient","getData","uniqBy","filter","device_type","currentAreas","forEach","areaTempData","tmp","areaWrlssData","wrl","length","areadata","mergedAreaTempData","concat","atd","reading","toISOString","tData","mergedAreaWrlssData","awd","avgTemp","reduce","ac","cv","avgWrlss","updatedAreaList","union","isEqual","Header","Dashboard","useReducer","dispatch","interval","setInterval","clearInterval","theme","DashboardOutlined","to","BarChartOutlined","component","App","basename","process","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b2946e0.chunk.js","sourcesContent":["import React from 'react'\nimport GaugeChart from \"react-gauge-chart\";\n\nconst TempGauge = (props) => {\n    const { value, title } = props; \n\n    return <div>\n        {value && <GaugeChart\n             nrOfLevels={16}\n             percent={value/100}\n             formatTextValue={(val) => `${val}° C`}\n             textColor={\"black\"}\n             needleColor={\"gray\"}\n             id=\"1\"\n        />}\n        {title && <h2>{title}</h2>}\n    </div>\n}\n\n\nexport default TempGauge; ","import React from \"react\";\nimport {\n    Chart,\n    Geom,\n    Axis,\n    Tooltip,\n    Legend,\n} from \"bizcharts\";\n\nconst TempChart = (props) => {\n    \n    const cols = {\n        time: {\n            range: [0, 1]\n        }\n    };\n    return (\n        <Chart height={400} data={props.data} scale={cols} autoFit>\n            <Legend />\n            <Axis name=\"month\" />\n            <Axis\n                name=\"temperature\"\n                label={{\n                    formatter: val => `${val}°C`\n                }}\n            />\n            <Tooltip\n                useHtml\n                g2-tooltip={{\n                    boxShadow: 'none',\n                    color: '#fff',\n                    backgroundColor: '#222'\n                }}\n                crosshairs={{\n                    type: \"y\"\n                }}\n                style={{\n                    color: 'red'\n                }}\n            />\n            <Geom\n                type=\"line\"\n                position=\"time*reading\"\n                size={2}\n                color={\"type\"}\n                shape={\"smooth\"}\n            />\n            <Geom\n                type=\"point\"\n                position=\"time*reading\"\n                size={4}\n                shape={\"circle\"}\n                color={\"type\"}\n                style={{\n                    stroke: \"#fff\",\n                    lineWidth: 1\n                }}\n            />\n        </Chart>\n    );\n}\n\nexport default TempChart; ","import React, { useEffect, useState } from 'react'\nimport TempGauge from \"../TempGauge\";\nimport TempChart from \"../TempChart\";\nimport { Layout } from \"antd\";\nimport \"./styles.css\";\n\nconst { Content } = Layout;\n\n\n\n\nconst AreaInfo = (props) => {\n    const { areas, match: { params } } = props;\n    const [area, setArea] = useState(null)\n    const areaId = params.id;\n\n    useEffect(() => {\n        const areaData = areas.find(area => area.name.split(' ').join('_') === areaId);\n        if (areaData) {\n            setArea(areaData);\n        }\n    }, [areaId, areas, setArea])\n\n    if (!area) {\n        return <span className=\"no-data\">No Data Available For this area</span>\n    }\n\n    const chartData = [...area.wrlss_data, ...area.temp_data].sort((a,b) => {\n        if (new Date(a.time) < new Date(b.time)) {\n            return -1; \n        }\n\n        if (new Date(a.time) > new Date(b.time)) {\n            return 1;\n        } \n        return 0; \n    })\n\n    return (<Content style={{ margin: '24px 16px 0' }}>\n        <div className=\"area-info\">\n            <div className=\"top-section\">\n                {area.temp_avg && <TempGauge value={area.temp_avg} title={\"Temperature\"} />}\n                <span className=\"area-title\">{area.name}</span>\n                {area.wrlss_avg && <TempGauge value={area.wrlss_avg} title={\"Wireless\"} />}\n            </div>\n            <div className=\"bottom-section\">\n                <TempChart data={chartData} title={area.name} />\n            </div>\n            {/* {area.readings.map(data => (<span id={data.time}>{data.reading}___{data.time}</span>))} */}\n        </div>\n    </Content>\n    )\n}\n\nexport default AreaInfo; ","import React from 'react'\nimport TempGauge from \"../TempGauge\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { Layout } from \"antd\";\nimport \"./styles.css\";\n\nconst { Content } = Layout;\n\nconst AreaAll = (props) => {\n    const history = useHistory(); \n    const { areas } = props;\n\n    const showAreaInfo = (name) => {\n        const id = name.split(\" \").join(\"_\");\n        history.push(`/area/${id}`);\n    }\n    \n\n    return <Content style={{ margin: '24px 16px 0' }}>\n        <div className=\"areas-all\">\n            {areas.map(area => (<span onClick={() => showAreaInfo(area.name)} key={area.name} className=\"area-gauge\">\n                <TempGauge value={area.temp_avg} title={area.name} />\n                {/* hellow */}\n            </span>))}\n        </div>\n    </Content>\n}\n\nexport default AreaAll;","import React from 'react';\nimport AreaInfo from \"../AreaInfo\"; \nimport AreaAll from \"../AreaAll\";\nimport { HomeOutlined } from \"@ant-design/icons\";\nimport { useHistory, Route } from \"react-router-dom\";\nimport { Layout, Menu } from 'antd';\nconst { SubMenu } = Menu; \nconst { Sider } = Layout; \n\n\nconst AreaData = (props) => {\n    const { data: { areas, areaList } } = props; \n    const history = useHistory(); \n\n    const selectArea = (areaName) => {\n        const id = areaName.split(\" \").join(\"_\");\n        history.push(`/area/${id}`);\n    }\n    \n    return (<Layout>\n        <Sider\n            breakpoint=\"lg\"\n            collapsedWidth=\"0\"\n            // onBreakpoint={broken => {\n            //     console.log(\"HELLO\", broken)\n            // }}\n            // onCollapse={(collapsed, type) => {\n            //     console.log(\"HELLOOOOO\", collapsed, type);\n            // }}\n        >\n            <Menu\n                mode=\"inline\"\n                defaultSelectedKeys={['1']}\n                defaultOpenKeys={['sub1']}\n                style={{ height: '100%', width: '200px', borderRight: 0 }}\n            >\n                <SubMenu key=\"sub1\" icon={<HomeOutlined />} title=\"Select Area\">\n                    {areaList.map(nme => (<Menu.Item onClick={() => selectArea(nme)} key={nme.split(' ').join('_')}>{nme}</Menu.Item>))}\n                </SubMenu>\n            </Menu>\n        </Sider>\n        <Layout style={{ padding: '0 24px 24px' }}>\n            <Route path=\"/area/:id\" render={(props) => (<AreaInfo {...props} areas={areas} />)} />\n            <Route path=\"/area\" exact render={(props) => (<AreaAll {...props} areas={areas} />)} />\n        </Layout>\n    </Layout>)\n}\n\nexport default AreaData; ","import React from 'react'\nimport { Chart, Interval, Tooltip } from 'bizcharts';\n\nconst BarChart = (props) => {\n    const { data, temperature } = props;\n\n    const position = `name*${temperature ? 'temp_avg' : 'wrlss_avg'}`;\n\n    return (<Chart height={750} autoFit data={data}  interactions={['active-region']} padding=\"auto\" >\n        <Interval position={position} />\n        <Tooltip shared />\n    </Chart>)\n}\n\nexport default BarChart; ","import React from 'react'\nimport { Table } from \"antd\";\nimport moment from \"moment\"; \n\nconst columns = [\n    {\n        title: 'Name',\n        dataIndex: 'device_display_name',\n        key: 'device_display_name',\n    },\n    // {\n    //     title: 'Type',\n    //     dataIndex: 'device_type',\n    //     key: 'device_type',\n    // },\n    {\n        title: 'Temprature',\n        dataIndex: 'reading',\n        key: 'reading',\n    },\n    {\n        title: 'Time',\n        dataIndex: 'time',\n        key: 'time',\n        render: (time) => moment(time).format('MMMM Do YYYY, h:mm:ss a')\n    }\n];\n\nconst CustomTable = (props) => {\n    return <Table dataSource={props.data} columns={columns} />\n}\n\n\nexport default CustomTable; ","import React, { useState } from 'react'\nimport { Layout, Menu } from 'antd';\nimport { HomeOutlined } from \"@ant-design/icons\";\nimport BarChart from \"../BarChart\";\nimport Table from \"../Table\";\nimport \"./style.css\";\n\nconst { SubMenu } = Menu;\nconst { Content, Sider } = Layout;\n\nconst LiveData = (props) => {\n    const [showTemperature, setShowTemperature] = useState(true);\n    const { data: { temperature, wireless, areas } } = props;\n    return (<Layout>\n        <Sider\n            breakpoint=\"lg\"\n            collapsedWidth=\"0\"\n            onBreakpoint={broken => {\n                console.log(broken)\n            }}\n            onCollapse={(collapsed, type) => {\n                console.log(collapsed, type);\n            }}\n        >\n            <Menu\n                mode=\"inline\"\n                defaultSelectedKeys={['1']}\n                defaultOpenKeys={['sub1']}\n                style={{ height: '100%', borderRight: 0 }}\n            >\n                <SubMenu key=\"sub1\" icon={<HomeOutlined />} title=\"Device Type\">\n                    <Menu.Item onClick={() => setShowTemperature(true)} key=\"1\">Temperature</Menu.Item>\n                    <Menu.Item onClick={() => setShowTemperature(false)} key=\"2\">Wireless</Menu.Item>\n                </SubMenu>\n            </Menu>\n        </Sider>\n        <Layout style={{ padding: '0 24px 24px' }}>\n            <Content style={{ margin: '24px 16px 0' }}>\n                <div className=\"live-data\">\n                    <div className=\"bar-chart\">\n                        <BarChart temperature={showTemperature} data={areas} />\n                    </div>\n                    <div className=\"data-table\">\n                        <Table data={showTemperature ? temperature : wireless} />\n                    </div>\n                </div>\n            </Content>\n        </Layout>\n    </Layout>)\n}\n\nexport default LiveData; ","import dataset from \"../dataset.json\";\nimport { slice, get } from \"lodash\";\n\nclass DataClient {\n    constructor() {\n        this.sampleSize = 100; \n        this.sampleNo = 1; \n    }\n\n    getData() {\n        const startAt = (this.sampleNo - 1) * this.sampleSize;\n        const endAt = startAt + this.sampleSize;\n        this.sampleNo += 1; \n        return slice(get(dataset, 'data', []), startAt, endAt).map((elem) => ({ ...elem, id: elem.device_display_name.split(' ').join('_') }));;\n    };\n}\n\n\nexport default new DataClient(); ","import dataClient from \"./data\";\nimport moment from \"moment\";\nimport { uniqBy, map, union, isEqual } from \"lodash\";\n\nexport const initialState = {\n    temperature: [],\n    wireless: [],\n    areas: [],\n    areaList: [],\n}\n\n// const sorter = (a, b) => {\n//     if (a.device_display_name < b.device_display_name) {\n//         return -1; \n//     } \n//     if (a.device_display_name > b.device_display_name) {\n//         return 1; \n//     }\n//     return 0; \n// }\n\n\nconst checkTime = (timestamp) => {\n    const now = new Date(); \n    const time = new Date(timestamp);\n    let diff = (now.getTime() - time.getTime())/1000; \n    diff /= 60; \n    console.log(\"Minutes difference:\", Math.abs(Math.round(diff)))\n    return (Math.abs(Math.round(diff)) <= 60)\n}\n\nexport const reducer = (state, action) => {\n    if (action.type === \"NEXT_POLL\") {\n        const dataset = dataClient.getData();\n        const areas = map(uniqBy(dataset, 'device_display_name'), 'device_display_name');\n        const wireless = dataset.filter(data => data.device_type === \"Wireless\");\n        const temperature = dataset.filter(data => data.device_type === \"Temperature\");\n\n        const currentAreas = [...state.areas]\n\n        areas.forEach(area => {\n            const areaTempData = temperature.filter(tmp => tmp.device_display_name === area);\n            const areaWrlssData = wireless.filter(wrl => wrl.device_display_name === area);\n            if (!areaTempData.length) {\n                return;\n            }\n\n            const areaData = currentAreas.find(areadata => areadata.name === area);\n\n            if (areaData) {\n                const mergedAreaTempData = areaData.temp_data.concat(areaTempData.map(atd => ({ reading: atd.reading, time: moment(atd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Temperature\", timestamp: new Date().toISOString() }))).filter(tData => checkTime(tData.timestamp))\n                const mergedAreaWrlssData = areaData.wrlss_data.concat(areaWrlssData.map(awd => ({ reading: awd.reading, time: moment(awd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Wireless\", timestamp: new Date().toISOString() }))).filter(tData => checkTime(tData.timestamp))\n\n                const totalTemp = mergedAreaTempData.reduce((ac, cv) => ac + cv.reading, 0);\n                const avgTemp = totalTemp / mergedAreaTempData.length;\n\n                const totalWrlss = mergedAreaWrlssData.reduce((ac, cv) => ac + cv.reading, 0);\n                const avgWrlss = totalWrlss / mergedAreaWrlssData.length;\n\n                areaData.temp_avg = avgTemp;\n                areaData.wrlss_avg = avgWrlss;\n                areaData.temp_data = mergedAreaTempData;\n                areaData.wrlss_data = mergedAreaWrlssData;\n            } else {\n                const totalTemp = areaTempData.reduce((ac, cv) => ac + cv.reading, 0);\n                const avgTemp = totalTemp / areaTempData.length;\n\n                const totalWrlss = areaWrlssData.reduce((ac, cv) => ac + cv.reading, 0);\n                const avgWrlss = totalWrlss / areaWrlssData.length;\n\n                currentAreas.push({\n                    name: area,\n                    wrlss_avg: avgWrlss, \n                    temp_avg: avgTemp,\n                    temp_data: areaTempData.map(atd => ({ reading: atd.reading, time: moment(atd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Temperature\", timestamp: new Date().toISOString() })), // last 1 hour only\n                    wrlss_data: areaWrlssData.map(awd => ({ reading: awd.reading, time: moment(awd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Wireless\", timestamp: new Date().toISOString() })),\n                })\n            }\n        });\n\n        const updatedAreaList = union(state.areaList, areas);\n        return {\n            ...state,\n            wireless: wireless, //.sort(sorter), \n            temperature: temperature, //.sort(sorter),\n            ...(!isEqual(state.areaList, updatedAreaList) && { areaList: updatedAreaList.sort() }),\n            areas: currentAreas,\n        };\n    }\n\n    return state;\n}\n\n","import React, { useReducer, useEffect } from 'react'\nimport AreaData from \"../AreaData\";\nimport LiveData from \"../LiveData\";\nimport { Layout, Menu } from 'antd';\nimport { DashboardOutlined, BarChartOutlined } from \"@ant-design/icons\";\nimport { reducer, initialState } from \"../../services/reducer\";\nimport { Route, Link, Redirect } from \"react-router-dom\";\nimport \"./styles.css\";\n\nconst { Header } = Layout;\n\nconst Dashboard = (props) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    useEffect(() => {\n        dispatch({ type: \"NEXT_POLL\" });\n        const interval = setInterval(() => {\n            dispatch({ type: \"NEXT_POLL\" })\n        }, 10000);\n        return () => {\n            clearInterval(interval);\n        }\n    }, [dispatch])\n\n    const { temperature, wireless, areas, areaList } = state;\n\n    console.log(\"Dashboard Rerender\")\n\n    return (<Layout style={{height:\"100vh\"}}>\n        <Header className=\"header\">\n            <div className=\"logo\" />\n            <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n                <Menu.Item onClick={() => console.log(\"Area DAta\")} key=\"1\" icon={<DashboardOutlined />}>\n                    <Link to=\"/area\">Area Data</Link>\n                </Menu.Item>\n                <Menu.Item onClick={() => console.log(\"Live Data\")} key=\"2\" icon={<BarChartOutlined />}>\n                    <Link to=\"/live\">Live Data</Link>\n                </Menu.Item>\n            </Menu>\n        </Header>\n\n        <Route path=\"/\" exact render={(props) => <Redirect to=\"/area\" {...props} />}/>\n        <Route path=\"/live\" render={(props) => <LiveData {...props} data={{ temperature, wireless, areas }} />} />\n        <Route path=\"/area\" component={(props) => <AreaData {...props} data={{ areas, areaList }} />} />\n            {/* <Footer style={{ textAlign: 'center' }}></Footer> */}\n    </Layout>)\n}\n\nexport default Dashboard;","import './App.css';\nimport 'antd/dist/antd.css';\nimport Dashboard from \"./components/Dashboard\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Dashboard />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}