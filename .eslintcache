[{"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/App.js":"1","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/reportWebVitals.js":"2","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/index.js":"3","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/Table/index.js":"4","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/Dashboard/index.js":"5","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/services/data.js":"6","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/services/reducer.js":"7","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/BarChart/index.js":"8","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/LiveData/index.js":"9","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/TempGauge/index.js":"10","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/AreaData/index.js":"11","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/AreaInfo/index.js":"12","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/TempChart/index.js":"13","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/AreaAll/index.js":"14"},{"size":308,"mtime":1606636297440,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1606565127395,"results":"17","hashOfConfig":"16"},{"size":500,"mtime":1606565127395,"results":"18","hashOfConfig":"16"},{"size":716,"mtime":1606651622985,"results":"19","hashOfConfig":"16"},{"size":1861,"mtime":1606649135260,"results":"20","hashOfConfig":"16"},{"size":529,"mtime":1606571227377,"results":"21","hashOfConfig":"16"},{"size":3104,"mtime":1606650086960,"results":"22","hashOfConfig":"16"},{"size":438,"mtime":1606651608260,"results":"23","hashOfConfig":"16"},{"size":1869,"mtime":1606647832861,"results":"24","hashOfConfig":"16"},{"size":478,"mtime":1606637443667,"results":"25","hashOfConfig":"16"},{"size":1780,"mtime":1606650203131,"results":"26","hashOfConfig":"16"},{"size":1657,"mtime":1606650328597,"results":"27","hashOfConfig":"16"},{"size":3971,"mtime":1606644397969,"results":"28","hashOfConfig":"16"},{"size":811,"mtime":1606648775414,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"117d685",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"35"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/App.js",[],["64","65"],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/reportWebVitals.js",[],["66","67"],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/index.js",[],["68","69"],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/Table/index.js",[],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/Dashboard/index.js",[],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/services/data.js",[],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/services/reducer.js",["70"],"import dataClient from \"./data\";\nimport moment from \"moment\"; \nimport { uniqBy, map, union, isEqual } from \"lodash\";\n\nexport const initialState = {\n    temperature: [],\n    wireless: [],  \n    areas: [],\n    areaList: [],\n}\n\nconst sorter = (a, b) => {\n    if (a.device_display_name < b.device_display_name) {\n        return -1; \n    } \n    if (a.device_display_name > b.device_display_name) {\n        return 1; \n    }\n    return 0; \n}\n\nexport const reducer = (state, action) => {\n    if (action.type === \"NEXT_POLL\") {\n        const dataset = dataClient.getData(); \n        const areas = map(uniqBy(dataset, 'device_display_name'), 'device_display_name');\n        const wireless = dataset.filter(data => data.device_type === \"Wireless\");\n        const temperature = dataset.filter(data => data.device_type === \"Temperature\");\n        \n        const currentAreas = [...state.areas]\n        \n        areas.forEach(area => {\n            const areaTempData = temperature.filter(tmp => tmp.device_display_name === area);\n            const areaWrlssData = wireless.filter(wrl => wrl.device_display_name === area);\n            if (!areaTempData.length) {\n                return; \n            }\n            const totalTemp = areaTempData.reduce((ac, cv) => ac + cv.reading, 0);\n            const avgTemp = totalTemp/areaTempData.length; \n\n            const totalWrlss = areaWrlssData.reduce((ac, cv) => ac + cv.reading, 0);\n            const avgWrlss = totalWrlss/areaWrlssData.length; \n\n            // later filter out by last 1 hour data only\n            const areaData = currentAreas.find(areadata => areadata.name === area);\n            if (areaData) {\n                areaData.temp_avg = avgTemp; // later calculate agains existing\n                areaData.wrlss_avg = avgWrlss; // later calculate agains existing\n                areaData.temp_data = areaData.temp_data.concat(areaTempData.map(atd => ({ reading: atd.reading, time: moment(atd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Temperature\" })))\n                areaData.wrlss_data = areaData.wrlss_data.concat(areaWrlssData.map(awd => ({ reading: awd.reading, time: moment(awd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Wireless\" })))\n            } else {\n                currentAreas.push({\n                    name: area, \n                    temp_avg: avgTemp, \n                    temp_data: areaTempData.map(atd => ({ reading: atd.reading, time: moment(atd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Temperature\" })), // last 1 hour only\n                    wrlss_data: areaWrlssData.map(awd => ({ reading: awd.reading, time: moment(awd.time).format('MMMM Do YYYY, h:mm:ss a'), type: \"Wireless\" })),\n                })\n            }\n        });\n\n        const updatedAreaList = union(state.areaList, areas);\n        return {\n            ...state, \n            wireless: wireless, //.sort(sorter), \n            temperature: temperature, //.sort(sorter),\n            ...(!isEqual(state.areaList, updatedAreaList) && { areaList: updatedAreaList.sort() }),\n            areas: currentAreas, \n        };\n    } \n\n    return state; \n}\n\n","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/BarChart/index.js",[],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/LiveData/index.js",[],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/TempGauge/index.js",[],["71","72"],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/AreaData/index.js",["73","74","75","76","77","78"],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/AreaInfo/index.js",[],"/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/TempChart/index.js",["79"],"import React from \"react\";\nimport {\n    Chart,\n    Geom,\n    Axis,\n    Tooltip,\n    Legend,\n} from \"bizcharts\";\n\nconst TempChart = (props) => {\n    const data = [\n        {\n            month: \"Jan\",\n            city: \"Tokyo\",\n            temperature: 7\n        },\n        {\n            month: \"Jan\",\n            city: \"London\",\n            temperature: 3.9\n        },\n        {\n            month: \"Feb\",\n            city: \"Tokyo\",\n            temperature: 6.9\n        },\n        {\n            month: \"Feb\",\n            city: \"London\",\n            temperature: 4.2\n        },\n        {\n            month: \"Mar\",\n            city: \"Tokyo\",\n            temperature: 9.5\n        },\n        {\n            month: \"Mar\",\n            city: \"London\",\n            temperature: 5.7\n        },\n        {\n            month: \"Apr\",\n            city: \"Tokyo\",\n            temperature: 14.5\n        },\n        {\n            month: \"Apr\",\n            city: \"London\",\n            temperature: 8.5\n        },\n        {\n            month: \"May\",\n            city: \"Tokyo\",\n            temperature: 18.4\n        },\n        {\n            month: \"May\",\n            city: \"London\",\n            temperature: 11.9\n        },\n        {\n            month: \"Jun\",\n            city: \"Tokyo\",\n            temperature: 21.5\n        },\n        {\n            month: \"Jun\",\n            city: \"London\",\n            temperature: 15.2\n        },\n        {\n            month: \"Jul\",\n            city: \"Tokyo\",\n            temperature: 25.2\n        },\n        {\n            month: \"Jul\",\n            city: \"London\",\n            temperature: 17\n        },\n        {\n            month: \"Aug\",\n            city: \"Tokyo\",\n            temperature: 26.5\n        },\n        {\n            month: \"Aug\",\n            city: \"London\",\n            temperature: 16.6\n        },\n        {\n            month: \"Sep\",\n            city: \"Tokyo\",\n            temperature: 23.3\n        },\n        {\n            month: \"Sep\",\n            city: \"London\",\n            temperature: 14.2\n        },\n        {\n            month: \"Oct\",\n            city: \"Tokyo\",\n            temperature: 18.3\n        },\n        {\n            month: \"Oct\",\n            city: \"London\",\n            temperature: 10.3\n        },\n        {\n            month: \"Nov\",\n            city: \"Tokyo\",\n            temperature: 13.9\n        },\n        {\n            month: \"Nov\",\n            city: \"London\",\n            temperature: 6.6\n        },\n        {\n            month: \"Dec\",\n            city: \"Tokyo\",\n            temperature: 9.6\n        },\n        {\n            month: \"Dec\",\n            city: \"London\",\n            temperature: 4.8\n        }\n    ];\n    const cols = {\n        time: {\n            range: [0, 1]\n        }\n    };\n    return (\n        <Chart height={400} data={props.data} scale={cols} autoFit>\n            <Legend />\n            <Axis name=\"month\" />\n            <Axis\n                name=\"temperature\"\n                label={{\n                    formatter: val => `${val}°C`\n                }}\n            />\n            <Tooltip\n                useHtml\n                g2-tooltip={{\n                    boxShadow: 'none',\n                    color: '#fff',\n                    backgroundColor: '#222'\n                }}\n                crosshairs={{\n                    type: \"y\"\n                }}\n                style={{\n                    color: 'red'\n                }}\n            />\n            <Geom\n                type=\"line\"\n                position=\"time*reading\"\n                size={2}\n                color={\"type\"}\n                shape={\"smooth\"}\n            />\n            <Geom\n                type=\"point\"\n                position=\"time*reading\"\n                size={4}\n                shape={\"circle\"}\n                color={\"type\"}\n                style={{\n                    stroke: \"#fff\",\n                    lineWidth: 1\n                }}\n            />\n        </Chart>\n    );\n}\n\nexport default TempChart; ","/home/shubham/Personal/Zenetics Assignment/dataset-assignment/src/components/AreaAll/index.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"80","replacedBy":"84"},{"ruleId":"82","replacedBy":"85"},{"ruleId":"80","replacedBy":"86"},{"ruleId":"82","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":12,"column":7,"nodeType":"90","messageId":"91","endLine":12,"endColumn":13},{"ruleId":"80","replacedBy":"92"},{"ruleId":"82","replacedBy":"93"},{"ruleId":"88","severity":1,"message":"94","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"95","line":1,"column":27,"nodeType":"90","messageId":"91","endLine":1,"endColumn":36},{"ruleId":"88","severity":1,"message":"96","line":2,"column":8,"nodeType":"90","messageId":"91","endLine":2,"endColumn":17},{"ruleId":"88","severity":1,"message":"97","line":6,"column":10,"nodeType":"90","messageId":"91","endLine":6,"endColumn":15},{"ruleId":"88","severity":1,"message":"98","line":6,"column":17,"nodeType":"90","messageId":"91","endLine":6,"endColumn":24},{"ruleId":"88","severity":1,"message":"99","line":10,"column":8,"nodeType":"90","messageId":"91","endLine":10,"endColumn":15},{"ruleId":"88","severity":1,"message":"100","line":11,"column":11,"nodeType":"90","messageId":"91","endLine":11,"endColumn":15},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],["101"],["102"],["101"],["102"],"no-unused-vars","'sorter' is assigned a value but never used.","Identifier","unusedVar",["101"],["102"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'TempGauge' is defined but never used.","'union' is defined but never used.","'isEqual' is defined but never used.","'Content' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]